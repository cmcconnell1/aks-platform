name: Terraform Deploy

# Prevent concurrent runs of this workflow
concurrency:
  group: terraform-deploy-${{ github.ref }}
  cancel-in-progress: false

on:
  push:
    branches: [main]
    paths:
      - 'terraform/**/*.tf'
      - 'terraform/**/*.tfvars'
      - 'terraform/**/terraform.tfvars.example'
      - '.github/workflows/terraform-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Terraform action'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

env:
  TF_VERSION: '1.7.5'

jobs:
  terraform-deploy:
    name: Terraform Deploy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      # Terraform variables as environment variables
      TF_VAR_project_name: "aks-platform"
      TF_VAR_location: "East US"
      TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}
      TF_VAR_vnet_address_space: '["10.0.0.0/16"]'
      TF_VAR_aks_subnet_address_prefix: "10.0.1.0/24"
      TF_VAR_app_gateway_subnet_address_prefix: "10.0.2.0/24"
      TF_VAR_private_endpoint_subnet_address_prefix: "10.0.3.0/24"
      TF_VAR_aks_node_count: 2
      TF_VAR_aks_node_vm_size: "Standard_D2s_v3"
      TF_VAR_aks_max_node_count: 5
      TF_VAR_aks_min_node_count: 1
      TF_VAR_enable_private_cluster: true
      TF_VAR_enable_spot_instances: false
      TF_VAR_enable_ai_node_pool: true
      TF_VAR_ai_node_vm_size: "Standard_NC6s_v3"
      TF_VAR_ai_node_count: 1
      TF_VAR_enable_private_endpoints: true
      TF_VAR_authorized_ip_ranges: '[]'
      TF_VAR_create_demo_ssl_certificate: true
      TF_VAR_ssl_certificate_subject: "aks-platform-dev.local"
      TF_VAR_ssl_certificate_dns_names: '["aks-platform-dev.local", "*.aks-platform-dev.local"]'
      TF_VAR_enable_cert_manager: false
      TF_VAR_letsencrypt_email: ""
      TF_VAR_enable_letsencrypt_staging: true
      TF_VAR_enable_letsencrypt_prod: false
      TF_VAR_enable_application_gateway: true
      TF_VAR_enable_argocd: true
      TF_VAR_argocd_namespace: "argocd"
      TF_VAR_enable_ai_tools: true
      TF_VAR_enable_jupyter_hub: true
      TF_VAR_enable_mlflow: true
      TF_VAR_enable_kubeflow: false
      TF_VAR_enable_monitoring: true
      TF_VAR_enable_logging: true
      TF_VAR_tags: '{"Environment":"dev","Project":"AKS-GitOps","ManagedBy":"Terraform","Owner":"DevOps-Team","CostCenter":"Engineering"}'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup Python Virtual Environment
        run: |
          python -m venv venv
          echo "VIRTUAL_ENV=$PWD/venv" >> $GITHUB_ENV
          echo "$PWD/venv/bin" >> $GITHUB_PATH
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt

      - name: Validate Python Environment
        run: |
          source venv/bin/activate
          python scripts/check-python-env.py

      - name: Set Environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "action=${{ github.event.inputs.action }}" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "action=apply" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="environments/${{ steps.set-env.outputs.environment }}/backend.conf"
        working-directory: terraform

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -out="${{ steps.set-env.outputs.environment }}.tfplan"
        working-directory: terraform

      - name: Terraform Apply
        if: steps.set-env.outputs.action == 'apply'
        run: |
          terraform apply \
            -auto-approve \
            "${{ steps.set-env.outputs.environment }}.tfplan"
        working-directory: terraform

      - name: Terraform Destroy
        if: steps.set-env.outputs.action == 'destroy'
        run: |
          terraform destroy \
            -auto-approve
        working-directory: terraform

      - name: Get Outputs
        if: steps.set-env.outputs.action == 'apply'
        id: outputs
        run: |
          echo "aks_cluster_name=$(terraform output -raw aks_cluster_name)" >> $GITHUB_OUTPUT
          echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
          echo "application_gateway_ip=$(terraform output -raw application_gateway_public_ip)" >> $GITHUB_OUTPUT
        working-directory: terraform
        continue-on-error: true

      - name: Configure kubectl
        if: steps.set-env.outputs.action == 'apply'
        run: |
          az aks get-credentials \
            --resource-group ${{ steps.outputs.outputs.resource_group_name }} \
            --name ${{ steps.outputs.outputs.aks_cluster_name }} \
            --overwrite-existing
        continue-on-error: true

      - name: Verify Deployment
        if: steps.set-env.outputs.action == 'apply'
        run: |
          echo "Verifying AKS cluster..."
          kubectl get nodes
          
          echo "Checking system pods..."
          kubectl get pods -n kube-system
          
          echo "Checking ArgoCD..."
          kubectl get pods -n argocd || echo "ArgoCD not yet ready"
          
          echo "Checking AI tools..."
          kubectl get pods -n ai-tools || echo "AI tools not yet ready"
          
          echo "Checking monitoring..."
          kubectl get pods -n monitoring || echo "Monitoring not yet ready"
        continue-on-error: true

      - name: Post Deployment Summary
        if: steps.set-env.outputs.action == 'apply'
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `
            ## Deployment Summary for ${{ steps.set-env.outputs.environment }}
            
            **Status**: Deployment completed successfully
            **Environment**: ${{ steps.set-env.outputs.environment }}
            **AKS Cluster**: ${{ steps.outputs.outputs.aks_cluster_name }}
            **Resource Group**: ${{ steps.outputs.outputs.resource_group_name }}
            **Application Gateway IP**: ${{ steps.outputs.outputs.application_gateway_ip }}
            
            ### Next Steps
            1. Configure DNS records to point to the Application Gateway IP
            2. Access applications:
               - ArgoCD: https://argocd.your-domain.com
               - Grafana: https://grafana.your-domain.com
               - JupyterHub: https://jupyter.your-domain.com
               - MLflow: https://mlflow.your-domain.com
            
            ### kubectl Access
            \`\`\`bash
            az aks get-credentials --resource-group ${{ steps.outputs.outputs.resource_group_name }} --name ${{ steps.outputs.outputs.aks_cluster_name }}
            \`\`\`
            `;
            
            core.summary.addRaw(summary);

  post-deployment-tests:
    name: Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: terraform-deploy
    if: github.event.inputs.action != 'destroy'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Run Infrastructure Tests
        run: |
          echo "Running infrastructure validation tests..."
          
          # Test AKS cluster connectivity
          az aks get-credentials \
            --resource-group $(terraform output -raw resource_group_name) \
            --name $(terraform output -raw aks_cluster_name) \
            --overwrite-existing
          
          # Basic connectivity tests
          kubectl cluster-info
          kubectl get nodes
          
          # Test Application Gateway
          APP_GW_IP=$(terraform output -raw application_gateway_public_ip)
          echo "Testing Application Gateway at $APP_GW_IP"
          curl -I "http://$APP_GW_IP" || echo "Application Gateway not yet responding"
        working-directory: terraform
        continue-on-error: true

      - name: Run Security Tests
        run: |
          echo "Running security validation tests..."
          
          # Check RBAC
          kubectl auth can-i get pods --as=system:anonymous || echo "Anonymous access properly denied"
          
          # Check network policies
          kubectl get networkpolicies --all-namespaces
          
          # Check pod security standards
          kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace}{"\t"}{.metadata.name}{"\t"}{.spec.securityContext}{"\n"}{end}'
        continue-on-error: true
